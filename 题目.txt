1.说一下类加载过程

 首先是加载阶段：
 根据全限定类名将这个类对应的字节码文件以二进制流的形式加载进内存。一般是从本地文件系统中进行读取加载的。
 加载到内存后，会把字节流转换成对应的类元数据信息，方法信息，常量池等放到方法区中。并且生成一个Class对象，这个Class对象作为访问这个类的类型信息的入口。
 
 然后是链接阶段：链接阶段分3步骤：验证，准备，解析。=
 验证阶段：主要是做一些校验工作，比如判断这个字节码格式是不是符合JVM的标准，像文件头校验。
 准备阶段：会为类变量做默认初始化操作，为它赋值一个默认的初始值。如果是final修饰的类变量，会在编译阶段就分配好具体的值了。
 解析阶段：会将常量池中的符号引用解析为直接引用，就是将原来描述目标的符号解析得到直接指向目标的指针，或者偏移量，能直接访问到目标。
 
 初始化阶段：主要是执行类的初始化方法，即clinit。这个方法主要是收集类变量的显示赋值动作和静态代码块。
 
 到这里类的加载动作就结束了。
 
2.双亲委派机制的意义：
 
 防止重复加载同一个class字节码文件：再通过向上委托时会判断该类是否被加载过来，如果已经加载过了，那么就不会再加载一边，保证数据安全
 还能保证核心.class文件不会被篡改：
 
3.说一下垃圾回收机制

  JVM运行时数据区涉及到垃圾回收的主要是堆和方法区，像虚拟机栈和本地方栈虽然可能出现栈溢出StackOverflow但不涉及垃圾回收，直接出栈就好了。
  主要是针对堆和方法区，会频繁的收集堆中的新生代，较少收集老年代，极少收集方法区。

  垃圾回收一般分为两个阶段：标记阶段和垃圾清除阶段。
  标记阶段有2个代表性的算法，引用计数算法和可达性分析算法。
	其中引用计数算法：对每一个对象，只要有任何一个地方引用了这个对象，则它的引用计数器会加1，当某个引用失效时引用计数器就会减1。
					  当这个对象的引用计数器的值为0时，就表示该对象不再被使用，可以被回收。
					  
					  引用计数器有个致命的缺点就是没法处理循环引用的情况，比如对象A持有对象B的引用，同时对象B持有对象A的引用，这种对象时没法回收的，会造成内存泄漏。
					 
	可达性分析算法：会把一些活跃的引用作为根引用GC ROOTs，比如方法参数，局部变量，静态变量，常量池，持有的锁对象等等。
				    他的思路就是通过这一系列的GC ROOTS作为起始点，从他们开始沿着引用链向下搜索，能搜索到的对象就是可达的对象是活跃的，不能被收集。
					如果一个对象和GC ROOTS之间没有任何引用链相连的话，这个对象是不可达，回为其打上垃圾标记，就是垃圾会被回收。
					
					可达性分析一个不可避免的缺点：为了保证标记的准确性，在进行可达性分析的时候，要停止整个用户工作线程。会在体验上带来一定的延迟。
					
	补充finalize机制：加入这个对象在经过可达性分析后，被打上垃圾标记。
					  并且这个对象重写了finalize()方法而且在finalize()上为这个对象与GC ROOTs建立了引用关系，那么这个对象会被复活。
					  不会在这次GC中被回收，但是finalize()只会被调用一次。下次这个对象如果经过可达性分析后发现还是垃圾，那么会被直接回收。
					  
  清除阶段的算法我感觉主要体现在内存整理方法：
				一般清除的话都是通过维护一个空闲列表，把垃圾对象所占的内存空间添加到这个链表上。当需要分配新的空间时直接从这个链表上申请。
				但是因为这样回收后会产生很多的内存碎片，内存空间可能会被浪费掉。所以在清除后还会有内存整理阶段。
				
				内存整理分为两种：复制算法，压缩算法。
				
				复制算法：就是用2倍内存空间，将存活的对象都放到另一块内存中。所以空间上消耗大，而且也要重新维护各个对象之间的引用关系。
				压缩算法：可以做到内存中已占用部分和未占用部分分隔开。将存活对象按照地址顺序排列在内存的一侧，另一侧的就是空闲内存。
				
				
	
4.说一下你知道的垃圾回收器：

	我感觉垃圾回收器一般都会基于两个方面来优缺点的分析：
		一个是减少每次STW的时间，侧重于响应块；
		一种是倾向于吞吐量，减少总的垃圾回收时间，单次回收STW的时间可能更长，但是能做到回收的比较彻底。
		
		而且垃圾回收器的选择要根据运行时数据的特点来进行合理的选择。
	
	像最开始的垃圾回收器Serial：
		它的主要特点是串行回收，也有STW机制。回收阶段用的时压缩算法。一般Serial回收新生代，Serial Old回收老年代。
		一般是单线程串行回收，意味这个只有一个收集线程来完成垃圾收集工作，并且因为是串行的，所以要停止整个用户线程，直到它回收结束。
		
		所以它会有较大的停顿时间，但是回收的会比较彻底，高效。一般在单核CPU，单线程场景中比较适用。
		
		一般串行回收器会作为一个兜底的方案，其他垃圾回收器都没达到满意的效果时。
		
	ParNew回收器：
		是针对新生代的垃圾回收器，在进行垃圾回收时它是多线程并行的。但是和工作线程之间还是串行的，也要有STW的时间，所以相比Serial它的STW时间要少。
		能有效利用多核CPU，发挥硬件优势，减少STW的时间。
		
		不适合小型的单核CPU，因为还要线程切换。
		
	Parallel Old：和ParNew类似，只不过是针对老年代的回收。
	
	Parallel Scavenge：
		JDK8的默认垃圾回收器就是Parallel Scavenge+Parallel Old。
		Parallel Scavenge相比于ParaNew主要体现在它侧重于应用的吞吐量
		而且它有一个自动调剂的机制：我们可以通过VM参数设定GCTimeRation时间比例，最大停顿时间，最大堆，让虚拟机能自动调剂各部分内存比例，年龄计数值等。
		以达到我们设置的要求。
		
	CMS：侧重于低延迟，一定程度上做到了用户线程和垃圾回收线程同时进行。但是标记阶段还是会暂停整个用户线程，一定程度上减少了延迟时间。
	
	G1：内存区域分块Region。
	
	ZGC：
	
	
					
					
					
					
					
					
					
					
					
					
					
 